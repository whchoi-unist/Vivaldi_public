# EM Volume rendering + Stack Volume Rendering
# Fish : Original EM data 
# Mask : Mask data
# Brain : Stack data
# x     : work range for x axis
# y     : work range for y axis
# transf : Transfer function for EM data
# min_val  : minmum value for Brain
# max_val  : minmum value for Brain
def render(Fish, Mask, Brain, x, y, transf, min_val, max_val):
	ret_col = float4(0)								# initialize
	local_iter = orthogonal_iter(Fish, x, y, 1.0)	# create rendering iterator (Orthogonal)


	min_val = slider[0]/100.0 * 30000
	max_val = slider[1]/100.0 * 30000
	for elem in local_iter:
		fish  = point_query_3d(Fish, elem)			# Sample in EM data
		f_col = point_query_1d(transf, fish) 		# RGBA color for transfer function
		ret_col = alpha_compositing(ret_col, f_col) # Alpha compositing

		mask = point_query_3d(Mask, elem)			# Sample in Maks data

		if mask > 0:								# mask > 0 means it locates in Brain
			brain_elem = float3(elem.x / 990 * 464, elem.y / 860 * 404, elem.z / 1600 * 811)  # normalize corrodinates
			brain = linear_query_3d(Brain, brain_elem)	# Sample in Stack data
			b_col = float4(0)							# Brain color initialize
			
			if brain > min_val and brain < max_val:  	# Crop brain data from min_val to max_val
				#ret_col.w *= 0.5						# Reduce Alpha value for EM
				normalized_intensity = ((brain - min_val) / (1.0*(max_val - min_val) )) *255   	# Normalize brain data
				b_col = transfer(normalized_intensity)			# From transfer function in UI
				ret_col = alpha_compositing(ret_col, b_col)		# Alpha compositing

	# change background to white
	ret_col = background_white(ret_col)

	return RGB(ret_col)

# EM Volume rendering + Transfer function
# Color for EM can be controlled by viewer
# Fish : Original EM data 
# Mask : Mask data
# x     : work range for x axis
# y     : work range for y axis
def renderEM(Fish, Mask, x, y):
	ret_col = float4(0)								# initialize
	local_iter = orthogonal_iter(Fish, x, y, 1.0)	# create rendering iterator (Orthogonal)


	for elem in local_iter:
		fish  = point_query_3d(Fish, elem)			# Sample in EM data
		f_col = transfer(fish)
		ret_col = alpha_compositing(ret_col, f_col) # Alpha compositing

		mask = point_query_3d(Mask, elem)			# Sample in Maks data

		if mask > 0:								# mask > 0 means it locates in Brain
			a=10

	# change background to white
	ret_col = background_white(ret_col)

	return RGB(ret_col)



# EM Volume Rendering + Stack Maximum Projection
# Fish : Original EM data 
# Mask : Mask data
# Brain : Stack data
# x     : work range for x axis
# y     : work range for y axis
# transf : Transfer function for EM data
# input_col : color for Stack data
# min_val  : minmum value for Brain
# max_val  : minmum value for Brain
def max_intensity_rendering(Fish, Mask, Brain, x, y, transf, input_col, min_val, max_val):
	ret_col = float4(0)								# initialize
	local_iter = orthogonal_iter(Fish, x, y, 1.0)	# create rendering iterator (Orthogonal)

	cnt = 0											# initialize counter for iterator
	max_intensity = -99999.0						# initialize maximum intensity 
	matched_cnt = 0									# initialize matched cnt for maximum intensity
	for elem in local_iter:					
		mask = point_query_3d(Mask, elem)			# Sample from mask data

		if mask > 0:								# mask > 0 means it locates in Brain
			brain_elem = float3(elem.x / 990 * 464, elem.y / 860 * 404, elem.z / 1600 * 811)  # normalize corrodinates
			brain = linear_query_3d(Brain, brain_elem)	# Sample in Stack data

			if brain > min_val and brain < max_val:  	# Crop brain data from min_val to max_val
				if max_intensity < brain:			# Find maximum intensity
					max_intensity = brain
					matched_cnt = cnt
					
		cnt += 1


	local_iter = orthogonal_iter(Fish, x, y, 1.0)	# create another iterator (Orthogonal)
	cnt = 0
	for elem in local_iter:
		fish  = point_query_3d(Fish, elem)			# Sample in EM data
		f_col = point_query_1d(transf, fish) 		# RGBA color for transfer function
		ret_col = alpha_compositing(ret_col, f_col) # Alpha compositing
 
		# rendering for Stack
		if cnt == matched_cnt and cnt != 0:
			normalized_intensity = ((max_intensity - min_val) / (1.0*(max_val - min_val) ))  * 255
			b_col = transfer(normalized_intensity) 						# From transfer function in UI
			ret_col = alpha_compositing(ret_col, b_col)

		cnt += 1

	# change background to white
	ret_col = background_white(ret_col)

	return RGB(ret_col)



			
# Project Maximum Intensity for Stack data
# Fish : Original EM data 
# Mask : Mask data
# Brain : Stack data
# x     : work range for x axis
# y     : work range for y axis
# transf : Transfer function for EM data
# min_val  : minmum value for Brain
# max_val  : minmum value for Brain
# input_col : color for Stack data
def max_intensity(Fish, Mask, Brain, x, y, transf, min_val, max_val, input_col):
	ret_col = float4(0)								# initialize
	local_iter = orthogonal_iter(Fish, x, y, 1.0)	# create rendering iterator (Orthogonal)

	cnt = 0											# initialize counter for iterator
	max_intensity = -99999.0						# initialize maximum intensity 
	matched_cnt = 0									# initialize matched cnt for maximum intensity
	for elem in local_iter:
		mask = point_query_3d(Mask, elem)			# Sample from mask data

		if mask > 0:								# mask > 0 means it locates in Brain
			brain_elem = float3(elem.x / 990 * 464, elem.y / 860 * 404, elem.z / 1600 * 811)  # normalize corrodinates
			brain = linear_query_3d(Brain, brain_elem)	# Sample in Stack data

			if brain > min_val and brain < max_val:  	# Crop brain data from min_val to max_val
				if max_intensity < brain:			# Find maximum intensity
					max_intensity = brain
					matched_cnt = cnt
					
		cnt += 1


	# Initial color initializer
	normalized_intensity = 0.0
	b_col =float4(0)
	if 1 < 0:
		normalized_intensity = ((max_intensity - min_val) / (1.0*(max_val - min_val) ))
		b_col = float4(input_col[0].x*normalized_intensity, input_col[0].y*normalized_intensity, input_col[0].z*normalized_intensity, normalized_intensity*255)
		b_col = float4(input_col[0].x, input_col[0].y, input_col[0].z, normalized_intensity*255)
	else:
		normalized_intensity = ((max_intensity - min_val) / (1.0*(max_val - min_val) )) * 255
		b_col = transfer(normalized_intensity)


	ret_col = background_white(b_col)

	return RGB(ret_col)


def main():
	# EM data load
	# DATA_PATH represents '/path/to/vivaldi/../data'
	volume_ori   = load_data_3d(DATA_PATH+"/david/NewAlign/Zebrafish/Zebrafish.dat")
	# Mask dat load
	volume_mask  = load_data_3d(DATA_PATH+"/david/NewAlign/Mask/Mask.dat")

	# Transfer function for EM data is pre-defined
	tr_data = open(DATA_PATH+"/david/NewAlign/TF/Zebrafish.tf","rb").read()
	transf  = numpy.fromstring(tr_data, dtype=numpy.uint8).reshape(256,4).astype(numpy.float32)

	import sys
	# Parameter usage for this Vivaldi application
	# If parameter is given:
	#	render results for given Stack type
	# If parameter is not given:
	#	Ask which stack would be used
	# 		Use target stack
	if len(sys.argv) > 2:
		target_num = int(sys.argv[2])
		lines = open('TARGET.txt').readlines()
		target_img = lines[target_num-1].split(':')[0].replace(' ','')
		color      = lines[target_num-1].split(':')[1].replace(' ','')
		start_end  = lines[target_num-1].split(':')[2]

		start = int(start_end[:start_end.find('to')])
		end   = int(start_end[start_end.find('to')+2:])

	else:
		lines = open('TARGET.txt').readlines()
		from print_colors import print_bold
		print_bold('WHICH ONE DO YOU WANT TO RENDER?')
		for elem in range(len(lines)):
			print "   %d | %s"%(elem+1, lines[elem].split(' ')[0])

		target_num = input()
		target_img = lines[target_num-1].split(':')[0].replace(' ','')
		color      = lines[target_num-1].split(':')[1].replace(' ','')
		start_end  = lines[target_num-1].split(':')[2]

		start = int(start_end[:start_end.find('to')])
		end   = int(start_end[start_end.find('to')+2:])


	# Stack data load
	volume_brain = load_data_3d(DATA_PATH+'/david/NewAlign/Stacks/%s.dat'%target_img)

	# Set color for given color
	if color == "red":
		input_col = numpy.array([[171, 15, 15, 255], [171, 15, 15, 255],[171, 15, 15, 255],[171, 15, 15, 255]],dtype=numpy.float32)
	elif color == "green":
		input_col = numpy.array([[73, 157, 75, 255],[73, 157, 75, 255],[73, 157, 75, 255],[73, 157, 75, 255]],dtype=numpy.float32)
	elif color == "blue":
		input_col = numpy.array([[25, 101, 176, 255],[25, 101, 176, 255],[73, 157, 75, 255],[73, 157, 75, 255]],dtype=numpy.float32)
	elif color == "magenta":
		input_col = numpy.array([[231, 41, 138, 255],[231, 41, 138, 255],[231, 41, 138, 255],[231, 41, 138, 255]],dtype=numpy.float32)




	# EM + Mask only 
	# To make transfer function for EM
	#enable_viewer(renderEM(volume_ori, volume_mask, x, y).range(x=-512:512, y=-512:512), 'TFF', '3D', 256)

	
	enable_viewer(render(volume_ori, volume_mask, volume_brain, x, y, transf, start, end).range(x=-512:512, y=-512:512), 'TFF', '3D', 256, sld='SLIDER')
	#enable_viewer(max_intensity(volume_ori, volume_mask, volume_brain, x, y, transf, start, end, input_col).range(x=-512:512, y=-512:512), 'TFF', '3D', 256)
	#enable_viewer(max_intensity_rendering(volume_ori, volume_mask, volume_brain, x, y, transf, start, end, input_col).range(x=-512:512, y=-512:512), 'TFF', '3D', 256)

	#import os
	#os.system("cp ~/mvmtx/1.tf ~/Project/Vivaldi/data/david/TF/%s.tf"%target_img)

	
